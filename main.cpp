#include "sys_data.h"#include "fish.h"#include<cstdlib>#include<time.h>#include<windows.h>#include<iostream>using namespace std;#include "st08.h"#include "player.h"	const int Sum_Player=40;	char Player_Name[41][5]={"","st08","XXX","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""};	// 						  0      1  2     3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40	char name[Sum_Player+1][5];	int Player_ID[Sum_Player+1],Link_ID[Sum_Player+1],List[Sum_Player+1];	fish *Player[Sum_Player+1];	int Rounds=1;	void init();//≥ı ºªØvoid insert_Player(fish *Player,int Name_Num,int num);//insert AIvoid calc_Order();void Player_revive(int x,int y,int ID);void refresh_Food();void output();int main(){	init();	cout<<"Init done.\n";	refresh_Food();	cout<<"Food done.\n";//======================================Insert Player	for (int i=1;i<=20;i++)	{		Player[i]=new st08();		insert_Player(Player[i],1,i);	}	for (int i=21;i<=40;i++)	{		Player[i]=new XXX();		insert_Player(Player[i],2,i);	}	cout<<"Insert done.\n";//======================================Start Game	while (Rounds<=50)	{		fprintf(sys::Log,"Rounds: %d",Rounds);		cout<<"Rounds: "<<Rounds<<"\n";		if (Rounds % 5 == 1) refresh_Food();		memcpy(sys::Next_Dead_Queue,sys::Dead_Queue,sizeof(sys::Dead_Queue));		sys::Next_Dead_Player=sys::Dead_Player;		sys::Dead_Player=0;		memset(sys::Dead_Queue,0,sizeof(sys::Dead_Queue));		memset(sys::haveAttack,0,sizeof(sys::haveAttack));		memset(sys::haveMoved,0,sizeof(sys::haveMoved));		for (int i=1;i<=N;i++)			for (int j=1;j<=M;j++)			{				cout<<sys::System_Map[i][j]<<' ';				if (j==M) cout<<"\n";			}		int break_case;		//cin>>break_case;		for (int i=1;i<=sys::Next_Dead_Player;i++)		{			int x,y;			Player[Link_ID[sys::Next_Dead_Queue[i]]]->revive(x,y);			Player_revive(x,y,sys::Next_Dead_Queue[i]);			sys::haveDead[sys::Next_Dead_Queue[i]]=0;		}		cout<<"revive done.\n";		calc_Order();		cout<<"calc_Order done. "<<Rounds<<"\n";		for (int i=1;i<=Sum_Player;i++) cout<<Player_ID[List[i]]<<' ';		cout<<"\n";		//cin>>break_case;		for (int i=1;i<=Sum_Player;i++)		{			if (sys::haveDead[Player_ID[List[i]]] == 0)				Player[List[i]]->play();		}		Rounds++;	}//=============================================output the result	output();}//======================================Functions' Detailvoid refresh_Food(){	int i,j;	for (i=1;i<=40;i++)		for (j=1;j<=40;j++)		if (sys::System_Map[i][j] == -1) sys::System_Map[i][j]=0;	for (i=1;i<=50;i++)	{		while (1==1)		{			int x,y;			x=rand() % N +1;y=rand() % M +1;			if (sys::System_Map[x][y] == 0)			{				sys::System_Map[x][y]=-1;				break;			}		}	}}int cmax(int x,int y){    if (x>y) return x;    else return y;}void init(){	sys::init(Sum_Player);	int i;	for (i=1;i<=Sum_Player;i++) Player_ID[i]=i;	srand(time(NULL));	for (i=1;i<=1000;i++)	{		int x,y,t;		x=rand() % Sum_Player +1;		y=rand() % Sum_Player +1;		t=Player_ID[x];Player_ID[x]=Player_ID[y];Player_ID[y]=t;	}	for (i=1;i<=Sum_Player;i++) Link_ID[Player_ID[i]]=i;}void insert_Player(fish *Flag,int Name_num,int num){	Flag->inputID(Player_ID[num]);	strcpy(name[Player_ID[num]],Player_Name[num]);	int x,y;	x=rand() % N +1;y=rand() % M +1;	while (sys::System_Map[x][y]!=0)	{		x=rand() % N +1;y=rand() % M +1;	}	sys::System_Map[x][y]=Player_ID[num];	sys::Location[Player_ID[num]][0]=x;	sys::Location[Player_ID[num]][1]=y;	Flag->init();}void calc_Order(){	bool choose[Sum_Player+1];	memset(choose,0,sizeof(choose));	memset(List,0,sizeof(List));	int len=0,maxSpeed=0,lowScore=100000,maxn;	double h_mHP=0;	while (len<Sum_Player)	{		maxSpeed=0;lowScore=100000;maxn=-1;		for (int i=1;i<=Sum_Player;i++)			if (choose[i] == 0)			{				int ID=Player_ID[i];				if (sys::Speed[ID]>maxSpeed || (sys::Speed[ID] == maxSpeed && (double)sys::HP[ID]/sys::MaxHP[ID]-h_mHP>0.0001)					|| (sys::Speed[ID] == maxSpeed && (double)sys::HP[ID]/sys::MaxHP[ID]-h_mHP<0.0001 && sys::Score[ID]<lowScore))				{					maxSpeed=sys::Speed[ID];					h_mHP=(double)sys::HP[ID]/sys::MaxHP[ID];					lowScore=sys::Score[ID];					maxn=i;				}			}		len++;		List[len]=maxn;		choose[maxn]=1;	}}void Player_revive(int x,int y,int ID){	while (x<=0 || y<=0 || x>=N || y>=M || sys::System_Map[x][y]!=0)	{		x=rand() % N +1;y=rand() % M +1;	}	fprintf(sys::Log,sys::action[6],ID,x,y);	sys::System_Map[x][y]=ID;	sys::HP[ID]=cmax(sys::MaxHP[ID]/10,1);	sys::Location[ID][0]=x;	sys::Location[ID][1]=y;}void output(){	bool choose[51];	memset(choose,0,sizeof(choose));	int maxx=-1,maxn,del;	for (int j=1;j<=Sum_Player;j++)	{		maxx=-1;		for (int i=1;i<=Sum_Player;i++)		{			int del=Player_ID[i];			if (choose[i] == 0 && sys::Score[del]+sys::Exp[del]>maxx)			{				maxx=sys::Score[del]+sys::Exp[del];				maxn=i;			}		}		choose[maxn]=1;		maxn=Player_ID[maxn];		fprintf(sys::Log,"ID:%d Level:%d HP:%d maxHP:%d Att:%d Sp:%d Exp:%d Sc:%d\n",maxn,sys::Level[maxn],sys::HP[maxn],sys::MaxHP[maxn],sys::Strength[maxn],sys::Speed[maxn],sys::Exp[maxn],sys::Score[maxn]);	}