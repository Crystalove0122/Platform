#include "sys_data.h"#include<iostream>namespace sys{	int System_Map[51][51],Dead_Queue[51],Next_Dead_Queue[51];	int Dead_Player,Sum_Player,Map_Len,Next_Dead_Player;	int Location[51][2];	int HP[51],MaxHP[51],Speed[51],Strength[51];	int Level[51],Exp[51],Point[51],Score[51];	bool haveMoved[51],haveAttack[51],haveDead[51];	FILE *Log;	char *action[7];		void init(int Sum)	{		memset(haveMoved,0,sizeof(haveMoved));		memset(haveAttack,0,sizeof(haveAttack));		memset(haveDead,0,sizeof(haveDead));		memset(Point,0,sizeof(Point));		memset(HP,0,sizeof(HP));		memset(MaxHP,0,sizeof(MaxHP));		memset(Speed,0,sizeof(Speed));		memset(Strength,0,sizeof(Strength));		memset(Location,0,sizeof(Location));		memset(System_Map,0,sizeof(System_Map));		memset(Dead_Queue,0,sizeof(Dead_Queue));		memset(Next_Dead_Queue,0,sizeof(Next_Dead_Queue));		memset(Exp,0,sizeof(Exp));		memset(Score,0,sizeof(Score));		Dead_Player=0;Sum_Player=Sum;		for (int i=1;i<=Sum;i++) {Level[i]=1;Point[i]=10;}		Map_Len=40;		Log=fopen("Record.log","w");		action[0]="No.%d increase Health.\n";action[1]="No.%d increase Strength.\n";action[2]="No.%d increase Speed.\n";		action[3]="No.%d moved to (%d,%d)\n";action[4]="No.%d attacked No.%d\n";action[5]="No.%d ate a food.\n";action[6]="No.%d revived at (%d,%d)\n";	}	void increaseLevel(int x)	{		while (1==1)		{			int flag=0;			flag=((Level[x]+1)*(Level[x]+2)) >> 1;			if (Exp[x]>=flag)			{				Level[x]++;				Point[x]+=3;			}			else break;		}	}	void Clear_Dead(int x)	{		Dead_Player++;		Dead_Queue[Dead_Player]=x;		HP[x]=0;		haveDead[x]=1;		System_Map[Location[x][0]][Location[x][1]]=0;	}	int calc_max(int x,int y)	{		if (x>y) return x;		else return y;	}	int calc_min(int x,int y)	{		if (x<y) return x;		else return y;	}	bool increaseHealth(int x)	{		if (Point[x] == 0) return 0;		HP[x]+=2;MaxHP[x]+=2;		Point[x]--;		fprintf(Log,action[0],x);		return 1;	}	bool increaseStrength(int x)	{		if (Point[x] == 0) return 0;		Strength[x]++;Point[x]--;		fprintf(Log,action[1],x);		return 1;	}	bool increaseSpeed(int x)	{		if (Point[x] == 0) return 0;		Speed[x]++;Point[x]--;		fprintf(Log,action[2],x);		return 1;	}	int move(int x,int y,int ID)	{		if (x<=0 || y<=0 || x>=Map_Len || y>=Map_Len) return 0;		if (System_Map[x][y]!=0) return 0;		if (abs(Location[ID][0]-x)+abs(Location[ID][1]-y)>Speed[ID]) return 0;		if (haveAttack[ID] || haveMoved[ID]) return 0;		System_Map[Location[ID][0]][Location[ID][1]]=0;		System_Map[x][y]=ID;		Location[ID][0]=x;Location[ID][1]=y;		haveMoved[ID]=1;		fprintf(Log,action[3],ID,x,y);		return 1;	}	int attack(int x,int y,int ID)	{		if (x<=0 || y<=0 || x>=Map_Len || y>=Map_Len) return 0;		if (abs(Location[ID][0]-x)+abs(Location[ID][1]-y)>1) return 0;		if (System_Map[x][y] == 0 || haveAttack[ID]) return 0;		if (System_Map[x][y] == -1)		{			HP[ID]=calc_min(MaxHP[ID],HP[ID]+calc_max(2,MaxHP[ID]/10));			Exp[ID]++;			System_Map[x][y]=0;			fprintf(Log,action[5],ID);		}		else		{			int focus=System_Map[x][y];			HP[focus]=HP[focus]-Strength[ID];			if (HP[focus]<=0)			{				Clear_Dead(focus);				Exp[ID]+=calc_max(1,Level[focus] >> 1);				if (Level[focus]>Level[ID]) Score[ID]+=(Level[focus]-Level[ID]) << 1;			}			fprintf(Log,action[4],ID,focus);		}		haveAttack[ID]=1;		increaseLevel(ID);		return 1;	}};